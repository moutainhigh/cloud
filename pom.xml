<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.smart4y</groupId>
    <artifactId>cloud</artifactId>
    <version>1.0.3</version>
    <packaging>pom</packaging>
    <name>#1 微服务的平台</name>
    <description>Cloud project for Spring Boot</description>

    <modules>
        <module>cloud-core</module>
        <module>cloud-generator</module>
        <module>cloud-hippo</module>
        <module>cloud-owl</module>
        <module>cloud-spider</module>
        <module>cloud-vue</module>
    </modules>

    <properties>
        <java.version>1.8</java.version>
        <javax.activation.version>1.1.1</javax.activation.version>
        <jaxb.version>2.3.1</jaxb.version>
        <!-- Spring Cloud -->
        <spring-cloud.version>Greenwich.SR2</spring-cloud.version>
        <spring-cloud-alibaba.version>0.9.0.RELEASE</spring-cloud-alibaba.version>
        <!-- 镜像前缀 -->
        <docker.image.prefix>cloud</docker.image.prefix>
        <maven-dockerfile-plugin.version>1.4.10</maven-dockerfile-plugin.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
        <relativePath/>
    </parent>

    <dependencyManagement>
        <dependencies>
            <!-- 业务模块 -->
            <dependency>
                <groupId>com.smart4y</groupId>
                <artifactId>cloud-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.smart4y</groupId>
                <artifactId>cloud-generator</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- Spring Cloud -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- JDK9+ Jaxb模块引用 -->
            <dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
                <version>${jaxb.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-runtime</artifactId>
                <version>${jaxb.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sun.xml.bind</groupId>
                <artifactId>jaxb-impl</artifactId>
                <version>${jaxb.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.activation</groupId>
                <artifactId>activation</artifactId>
                <version>${javax.activation.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <resources>
            <resource>
                <!-- 先指定 src/main/resources下所有文件及文件夹为资源文件 -->
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <!-- MyBatis 生成插件 -->
                <plugin>
                    <groupId>org.mybatis.generator</groupId>
                    <artifactId>mybatis-generator-maven-plugin</artifactId>
                    <version>1.3.7</version>
                    <configuration>
                        <configurationFile>${basedir}/src/main/resources/mybatis/generatorConfig.xml
                        </configurationFile>
                        <overwrite>true</overwrite>
                        <verbose>true</verbose>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>com.smart4y</groupId>
                            <artifactId>cloud-generator</artifactId>
                            <version>${project.version}</version>
                            <type>jar</type>
                        </dependency>
                        <!-- 依赖业务模块 version:${project.version} type:jar -->
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                </plugin>
                <!-- Docker镜像插件 -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>${maven-dockerfile-plugin.version}</version>
                    <configuration>
                        <!-- Docker私服地址 -->
                        <repository>${docker.image.prefix}/${project.artifactId}</repository>
                        <tag>${project.version}</tag>
                        <buildArgs>
                            <!-- 提供参数向Dockerfile传递 -->
                            <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                            <!-- 提供参数向Dockerfile传递 -->
                            <IP_DB_FILE>src/main/resources/ip/ip2region.db</IP_DB_FILE>
                        </buildArgs>
                    </configuration>
                    <executions>
                        <execution>
                            <id>build-image</id>
                            <!-- 将插件绑定在package这个phase上（也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build） -->
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>