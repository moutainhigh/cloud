server:
  port: 8223
spring:
  application:
    name: cloud-hippo
  profiles:
    active: dev
  cloud:
    #手动配置Bus id,
    bus:
      id: ${spring.application.name}:${server.port}
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
  main:
    allow-bean-definition-overriding: true
  mvc:
    ##解决 Restful 404错误 spring.mvc.throw-exception-if-no-handler-found=true spring.resources.add-mappings=false
    throw-exception-if-no-handler-found: true
  resources:
    add-mappings: false
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/cloud?useSSL=false&useUnicode=true&autoReconnect=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: root
    password: 12345678
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      pool-name: dbg
      max-lifetime: 1765000
      minimum-idle: 1
      maximum-pool-size: 15
      connection-test-query: SELECT 1
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    publisher-confirms: true
  redis:
    host: 127.0.0.1
    port: 6379
    password: 123456
    lettuce:
      pool:
        max-active: 8
        max-wait: 3000ms
        max-idle: 8
        min-idle: 2
management:
  endpoints:
    web:
      exposure:
        # 开放部分端点和自定义端点
        include: '*'
##Mapper 配置
mapper:
  mappers:
    - tk.mybatis.mapper.common.Mapper
    - com.smart4y.cloud.mapper.CloudMapper
  not-empty: true
  identity: MYSQL
##分页配置
pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  auto-runtime-dialect: true
  params:
    - count=countSql
##MyBatis配置
mybatis:
  check-config-location: false
  #config-location: classpath:mybatis/mybatis-config.xml
  mapper-locations: classpath:mapper/*.xml
  configuration:
    #使全局的映射器启用或禁用缓存
    cache-enabled: true
    #全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。查询时关闭关联对象即时加载以提高性能
    lazy-loading-enabled: false
    #当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载
    aggressive-lazy-loading: true
    #是否允许单条sql 返回多个数据集  (取决于驱动的兼容性)
    multiple-result-sets-enabled: true
    #是否可以使用列的别名 (取决于驱动的兼容性)
    use-column-label: true
    #允许JDBC 生成主键
    use-generated-keys: true
    #指定MyBatis自动映射方式（数据基表的列 NONE：不映射　PARTIAL:只会自动映射简单, 没有嵌套的结果  FULL:会自动映射任意复杂的结果(嵌套的或其他情况)）
    auto-mapping-behavior: full
    #存在未知列时的处理方式
    auto-mapping-unknown-column-behavior: warning
    #默认的执行类型（SIMPLE: 简单；REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）
    default-executor-type: simple
    #使用驼峰命名法转换字段
    map-underscore-to-camel-case: true
    #设置本地缓存范围（session:数据共享 statement:语句范围不会数据共享 ）
    local-cache-scope: session
    #设置当JDBC类型为空时，插入空值时的处理方式
    jdbc-type-for-null: null
    default-enum-type-handler: com.smart4y.cloud.mapper.enumhandler.EnumHandler
cloud:
  ##开启资源扫描
  scan:
    register-request-mapping: true
  ##资源服务器公共配置
  common:
    #API网关访问地址
    api-server-addr: http://localhost:8888
    #管理后台前端访问地址
    admin-server-addr: http://localhost:8080
    #平台认证服务地址
    auth-server-addr: http://localhost:8211
    #默认使用OpenHelper.buildRedisTokenServices(RedisConnectionFactory redisConnectionFactory)
    #公共客户端配置（适用于OpenHelper.buildRemoteTokenServices(OpenCommonProperties properties)）
    client-id: 7gBZcbsC7kLIWCdELIl8nxcs
    client-secret: 0osTIhce7uPvDKHz6aa67bhCukaKoYl4
    scope: userProfile
    user-authorization-uri: ${cloud.common.auth-server-addr}/oauth/authorize
    access-token-uri: ${cloud.common.api-server-addr}/uaa/oauth/token
    token-info-uri: ${cloud.common.api-server-addr}/uaa/oauth/check_token
    user-info-uri: ${cloud.common.api-server-addr}/uaa/current/user
    #资源服务器jwt签名秘钥（适用于OpenHelper.buildJwtTokenServices(OpenCommonProperties properties)）
    jwt-signing-key: 2cde1eaa60fe4af1987f94caa13f29a2
  ##Swagger2默认配置
  swagger2:
    enabled: true
    title: 平台基础服务
    description: 平台基础服务
    client-id: ${cloud.common.client-id}
    client-secret: ${cloud.common.client-secret}
    scope: ${cloud.common.scope}
    access-token-uri: ${cloud.common.access-token-uri}
    user-authorization-uri: ${cloud.common.user-authorization-uri}

sms:
  #通用配置
  ##手机号码正则表达式，为空则不做验证
  reg:
  web:
    ##启用web端点
    enable: true
    ##访问路径前缀
    base-path: /commons/sms
  verification-code:
    ##存储方式
    repository: redis
    ##验证码长度
    code-length: 6
    ##为true则验证失败后删除验证码
    delete-by-verify-fail: false
    ##为true则验证成功后删除验证码
    delete-by-verify-succeed: true
    ##重试间隔时间，单位秒
    retry-interval-time: 60
    ##验证码有效期，单位秒
    expiration-time: 180
    ##识别码长度
    identification-code-length: 3
    ##是否启用识别码
    use-identification-code: false
  redis:
    ##验证码业务在保存到redis时的key的前缀
    key-prefix: VerificationCode
  ##阿里云
  aliyun:
    ##启用客户端
    enable: true
    ##AccessKeyId
    access-key-id: 7gBZcbsC7kLIWCdELIl8nxcs
    ##AccessKeySecret
    access-key-secret: 0osTIhce7uPvDKHz6aa67bhCukaKoYl4
    ##endpoint，默认为cn-hangzhou
    endpoint: cn-hangzhou
    ##短信签名
    sign-name:
    ##短信模板配置（key为业务层的NoticeData中type的值，value为阿里云中生成的短信模板ID）
    templates:
      ##验证码业务所使用的短信模板ID
      VerificationCode: SMS_00000000
      ##自定义业务所使用的短信模板ID
      test: SMS_00000001
  ##百度云
  baiducloud:
    ##启用客户端
    enable: true
    ##AccessKeyId
    access-key-id: 7gBZcbsC7kLIWCdELIl8nxcs
    ##AccessKeySecret
    secret-access-key: 0osTIhce7uPvDKHz6aa67bhCukaKoYl4
    endpoint: endpoint
    ##短信模板配置
    templates:
      ##验证码业务所使用的短信模板ID
      VerificationCode: SMS_00000000
      ##自定义业务所使用的短信模板ID
      test: SMS_00000001
  ##华为云
  huawei:
    ##启用客户端
    enable: true
    uri: 请求地址
    app-key: APP_Key
    app-secret: APP_Secret
    sender: 国内短信签名通道号或国际/港澳台短信通道号
    signature: 签名名称
    endpoint: endpoint
    ##短信模板配置
    templates:
      ##验证码业务所使用的短信模板ID
      VerificationCode: SMS_00000000
      ##自定义业务所使用的短信模板ID
      test: SMS_00000001
    params-orders:
      VerificationCode: ##规定验证码业务的参数顺序
        - code
        - identificationCode
