version: '3.2'
services:
  nacos:
    image: nacos/nacos-server:latest
    container_name: "nacos"
    labels:
      NAME: "nacos"
    hostname: "nacos"
    networks:
      - cloud
    ports:
      - "8848:8848"
    environment:
      - TZ=Asia/Shanghai
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
    healthcheck:
      test: "curl localhost:8848/nacos/actuator/health && exit 0 || exit 1"
      interval: 15s
      timeout: 5s
      retries: 128
    restart: on-failure

#  mysql:
#    image: mysql:5.7
#    container_name: "mysql"
#    labels:
#      NAME: "mysql"
#    hostname: "mysql"
#    networks:
#      - cloud
#    ports:
#      - "3306:3306"
#    environment:
#      - TZ=Asia/Shanghai
#      - MYSQL_ROOT_PASSWORD=123456
#    command: [
#      '--character-set-server=utf8mb4',
#      '--collation-server=utf8mb4_unicode_ci'
#    ]
#    volumes:
#      - ${DOCKER_VOL_DIR}/mysql/data:/var/lib/mysql
#      - ${DOCKER_VOL_DIR}/mysql/conf:/etc/mysql/conf.d
#      - ${DOCKER_VOL_DIR}/mysql/logs:/logs
#    healthcheck:
#      test: "mysqladmin ping -h localhost -p$$MYSQL_ROOT_PASSWORD && test '0' -eq $$(ps aux | awk '{print $$11}' | grep -c -e '^mysql$$')"
#      interval: 15s
#      timeout: 5s
#      retries: 128

  redis:
    image: redis:3.2
    container_name: "redis"
    labels:
      NAME: "redis"
    hostname: "redis"
    networks:
      - cloud
    ports:
      - "6379:6379"
    environment:
      - TZ=Asia/Shanghai
    command: redis-server --requirepass 123456
    healthcheck:
      test: "redis-cli -h 127.0.0.1 ping && exit 0 || exit 1"
      interval: 15s
      timeout: 5s
      retries: 128
  #    volumes:
  #      - ${DOCKER_VOL_DIR}/redis/conf:/usr/local/etc/redis
  #      - ${DOCKER_VOL_DIR}/redis/data:/data

#  zookeeper:
#    image: wurstmeister/zookeeper:3.4.6
#    container_name: "zookeeper"
#    labels:
#      NAME: "zookeeper"
#    hostname: "zookeeper"
#    networks:
#      - cloud
#    ports:
#      - "2181:2181"
#    restart: always

#  elasticsearch:
#    image: elasticsearch:5.5.2
#    container_name: "elasticsearch"
#    labels:
#      NAME: "elasticsearch"
#    hostname: "elasticsearch"
#    networks:
#      - cloud
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    environment:
#      - ES_JAVA_OPTS=-Xms256m -Xmx256m
#    volumes:
#      - /Users/anve/docker/es/data:/usr/share/elasticsearch/data
#  #      - /Users/anve/docker/es/logs:/usr/share/elasticsearch/logs
#  #      - /Users/anve/docker/es/plugins/ik:/usr/share/elasticsearch/plugins/ik
#  #      - /Users/anve/docker/es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

#  kafka:
#    image: wurstmeister/kafka:2.12-2.5.0
#    container_name: "kafka"
#    labels:
#      NAME: "kafka"
#    hostname: "kafka"
#    networks:
#      - cloud
#    ports:
#      - "9092:9092"
#    environment:
#      - TZ=CST-8
#      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
#      # 非必须，设置自动创建Topic
#      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
#      - KAFKA_ADVERTISED_HOST_NAME=127.0.0.1
#      - KAFKA_ADVERTISED_PORT=9092
#      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
#      - KAFKA_LISTENERS=PLAINTEXT://:9092
#      # 非必须，设置堆内存
#      - KAFKA_HEAP_OPTS=-Xmx1G -Xms1G
#      # 非必须，设置保存7天数据（默认值7天）
#      - KAFKA_LOG_RETENTION_HOURS=168
#    volumes:
#      # 将 kafka 的数据文件映射出来
#      - /Users/anve/docker/kafka:/kafka
#      - /var/run/docker.sock:/var/run/docker.sock
#    depends_on:
#      - zookeeper
#    restart: always

  rabbitmq:
    image: rabbitmq:3.7-management
    container_name: "rabbitmq"
    labels:
      NAME: "rabbitmq"
    hostname: "rabbitmq"
    networks:
      - cloud
    ports:
      - "5671:5671"
      - "5672:5672"
      - "15671:15671"
      - "15672:15672"
      - "25672:25672"
    environment:
      - TZ=Asia/Shanghai
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    #    volumes:
    #      - ${DOCKER_VOL_DIR}/rabbitmq/lib:/var/rabbitmq/lib
    healthcheck:
      test: "rabbitmqctl eval '{ true, rabbit_app_booted_and_running } = { rabbit:is_booted(node()), rabbit_app_booted_and_running }, { [], no_alarms } = { rabbit:alarms(), no_alarms }, [] /= rabbit_networking:active_listeners(), rabbitmq_node_is_healthy. ' || exit 1"
      interval: 15s
      timeout: 5s
      retries: 128

networks:
  cloud:
    driver: bridge